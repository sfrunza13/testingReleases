name: Release

on:
  push:
    branches:
      - release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Release:
    name: 'Release'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configurationJson: |
              {
                "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
                "categories": [
                  {
                    "title": "## üöÄ Features",
                    "labels": ["feature"]
                  },
                  {
                    "title": "## üêõ Fixes",
                    "labels": ["fix"]
                  },
                  {
                    "title": "## üß™ Tests",
                    "labels": ["test"]
                  },
                  {
                      "title": "## üí¨ Other",
                      "labels": ["other"]
                  },
                  {
                      "title": "## üì¶ Dependencies",
                      "labels": ["dependencies"]
                  }
                ]
              }
          commitMode: false
          fromTag: latest
          toTag: HEAD
          token: ${{ github.token }}
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Latest Changes
          tag_name: latest
          token: ${{ github.token }}
          body: ${{steps.build_changelog.outputs.changelog}}
          append_body: false
      - name: Advance latest tag
        uses: actions/github-script@v3
        with:
          github-token: ${{github.token}}          
          script: |
            try {
                await github.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: "tags/latest"
                })
            } catch (e) {
              console.log("The latest tag doesn't exist yet: " + e)
            }
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/latest",
              sha: context.sha
            })